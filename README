------------------------------------------------------------------------
SESHAT - Handwritten math expression parser
Copyright (C) 2014, Francisco Alvaro
Heavily modified in 2023 by Theo B.
------------------------------------------------------------------------

More information at https://github.com/falvaro/seshat

----------------
License: Seshat is released under the license GPLv3 (see LICENSE file)

----------------
Requirements:
- Compilation tools: makefile and g++

----------------
Usage: ./seshat -c config -i input [-o output] [-r render.pgm]

  -c config: set the configuration file
  -i input:  set the input math expression file
  -r render: save in 'render' the image representing the input expression (PGM format)
  -d graph:  save in 'graph' the description of the recognized tree (DOT format)

----------------
Modifications:
This version of seshat:
- Has no InkML support anymore (xerces-c dependency removed)
- No longer makes use of boost
- Requires  C++23 support in your compiler (std::ranges::iota_view, std::ranges::zip_view, std::ranges::fold_left)
  - Or at the very least, C++20 (concepts, std::span) with the ranges-v3 library to add the STL ranges missing from this version
- WIP: more modern memory management, less abusive usage of std::list. Who knows, might make it faster.
- As such, this is pretty much standalone, as long as you have a recent compiler and the Config folder

----------------
Example:
There are two example math expressions in folder "SampleMathExps". The following command
will recognize the expression (x+y)^2 encoded in "exp.scgink"

$ ./seshat -c Config/CONFIG -i SampleMathExps/exp.scgink -o out.inkml -r render.pgm -d out.dot

This command outputs several information through the standard output, where the last line will
provide the LaTeX string of the recognized math expression.

An image representation of the input strokes will be rendered in "render.pgm".

The InkML file of the recognized math expression will be saved in "out.inkml".

The derivation tree of the expression provided as a graph in DOT format will be saved in "out.dot".
The representation of the graph in, for example, postscript format can be obtained as follows

$ dot -o out.ps out.dot -Tps

It should be noted that only options "-c" and "-i" are mandatory.
